class SLLNode:
    def __init__(self, data):
        self.data = data
        self.next = None

    def __str__(self):
        return str(self.data)


class SinglyLinkedList:
    def __init__(self):
        self.head = None
        self.size = 0

    def append(self, data):
        node = SLLNode(data)
        if self.head is None:
            self.head = node
        else:
            current = self.head
            while current.next is not None:
                current = current.next

            current.next = node
        self.size += 1

    def get_size(self):
        return self.size


    def __str__(self):
        return str([node for node in self])


    def __iter__(self):
        current = self.head
        while current:
            value = current.data
            current = current.next
            yield value

    def clear(self):
        self.head = None
        self.size = 0
        return None

    def get_data(self, data):
        for node in self:
            if node.data == data:
                return node.data
        return False

    def  insert(self, prev_data, data):
        current = self.head
        while current:
            if current.data == prev_data:
                new_node = SLLNode(data)
                new_node.next = current.next
                current.next = new_node
                return
            current = current.next
        return False

    def delete(self, data):
        current = self.head
        previous = None
        found = False
        while not found:
            if current.data == data:
                found = True
            else:
                previous = current
                current = current.next
            if previous is None:
                self.head = current.next
            else:
                previous.next = current.next
            self.size -=1


class DLLNode:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

    def __str__(self):
        return str(self.data)


class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0

    def clear(self):
        self.head = None
        self.size = 0
        return None

    def get_data(self, data):
        for node in self:
            if node.data == data:
                return node.data
        return False


class MyStack:
    def __init__(self):
        self.stack = list

    def push(self, element):
        self.stack.append(element)
        return

    def pop(self):
        if self.stack < 0:
            return None
        else:
            return self.stack.pop()

    def top(self):
        if not self.stack < 0:
            return self.stack[-1]

    def size(self):
        return len(self.stack)


class MyQueue:
    def __init__(self):
        self.items = []

    def push(self, element):
        self.items.append(element)
        return

    def pop(self):
        if self.size() == 0:
            return None
        else:
            return self.items.pop(0)

    def show_right(self):
        if self.size == 0:
            return None
        return self.items[0]

    def show_left(self):
        if self.size == 0:
            return None
        return self.items[-1]

    def size(self):
        return len(self.items)
